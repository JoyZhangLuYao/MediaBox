package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zly.zly.mediabox.bean.CollectPhotoFileInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "C_PHOTO_TABLE".
*/
public class CollectPhotoFileInfoDao extends AbstractDao<CollectPhotoFileInfo, Long> {

    public static final String TABLENAME = "C_PHOTO_TABLE";

    /**
     * Properties of entity CollectPhotoFileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property FileNumber = new Property(2, Long.class, "fileNumber", false, "FILE_NUMBER");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property ClickMark = new Property(4, boolean.class, "clickMark", false, "CLICK_MARK");
        public final static Property Love = new Property(5, boolean.class, "love", false, "LOVE");
        public final static Property Buf = new Property(6, byte[].class, "buf", false, "BUF");
    };


    public CollectPhotoFileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CollectPhotoFileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"C_PHOTO_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"FILE_NUMBER\" INTEGER," + // 2: fileNumber
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"CLICK_MARK\" INTEGER NOT NULL ," + // 4: clickMark
                "\"LOVE\" INTEGER NOT NULL ," + // 5: love
                "\"BUF\" BLOB);"); // 6: buf
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_C_PHOTO_TABLE_NAME_DESC ON C_PHOTO_TABLE" +
                " (\"NAME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"C_PHOTO_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectPhotoFileInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long fileNumber = entity.getFileNumber();
        if (fileNumber != null) {
            stmt.bindLong(3, fileNumber);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getClickMark() ? 1L: 0L);
        stmt.bindLong(6, entity.getLove() ? 1L: 0L);
 
        byte[] buf = entity.getBuf();
        if (buf != null) {
            stmt.bindBlob(7, buf);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectPhotoFileInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long fileNumber = entity.getFileNumber();
        if (fileNumber != null) {
            stmt.bindLong(3, fileNumber);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getClickMark() ? 1L: 0L);
        stmt.bindLong(6, entity.getLove() ? 1L: 0L);
 
        byte[] buf = entity.getBuf();
        if (buf != null) {
            stmt.bindBlob(7, buf);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectPhotoFileInfo readEntity(Cursor cursor, int offset) {
        CollectPhotoFileInfo entity = new CollectPhotoFileInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // fileNumber
            cursor.getInt(offset + 3), // type
            cursor.getShort(offset + 4) != 0, // clickMark
            cursor.getShort(offset + 5) != 0, // love
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6) // buf
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectPhotoFileInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileNumber(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setClickMark(cursor.getShort(offset + 4) != 0);
        entity.setLove(cursor.getShort(offset + 5) != 0);
        entity.setBuf(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectPhotoFileInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectPhotoFileInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
